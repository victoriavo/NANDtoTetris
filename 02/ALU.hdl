// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

    //if zx = 1 & nx = 0, x = 0
    //if zx = 1 & nx = 1, x = 1
    //if zx = 0 & nx = 0, x = x
    //if zx = 0 & nx = 1, x = !x

    /*

    //We can set 15 false bits (15 0 bits) by using them as an input
    //Do we leave the input alone or do we change it?

    //X input treatments; zero it? negate it?

    Mux16(a=x, b=false, sel=zx, out=zerox); //if sel/zx = 1, then we set x = 0

    //After checking if the input needs to be zeroed out, then check for negation conditions by passing in the zero-checked result
    Not16(in=x, out=notx); //get negation of x
    Mux16(a=zerox, b=notx, sel=nx, out=negatex); //if sel/nx = 1, then we set x = !x

    //Y input treatments; zero it? negate it?

    Mux16(a=y, b=false, sel=zy, out=zeroy); //if sel/zy = 1, then we set y = 0

    Not16(in=y, out=noty); //get negation of y
    Mux16(a=zeroy, b=noty, sel=ny, out=negatey); //if sel/ny = 1, then we set y = !y
    */
    //---------------------------------------------------------------------------------


    //Now we can look at the input of f, which will let us know which function or operation to treat x and y
    //if (f==1), out = x + y
    //else (f==0), out = x & y

    //two output (operation) options
    Add16(a=negatex, b=negatey, out=xplusy);
    And16(a=negatex, b=negatey, out=xandy);

    //now we let the value of f determine which operation is chosen
    Mux16(a=xandy, b=xplusy, sel=f, out=operationout);
    //---------------------------------------------------------------------------------

    //Do we need to negate the output? Check by input value of no
    Not16(in=operationout, out=negateout); //negate output
    Mux16(a=operationout, b=negateout, sel=no, out[0..7]=out1, out[8..15]=out2, out[15]=mostsigbit);

    //Now let's see whether we set our flags zr and ng
    //zr flag
    //we need to check if all bits are zero (out = 0), so we can use the Or gate to see if any bit is equal to 1, but we have to perform an Or across all 16 bits, but we don't have an Or16Way chip
    //However, we have a Or8Way chip so we can use a couple of those to get an Or16Way
    Or8Way(in=out1, out=zerochecklow);
    Or8Way(in=out2, out=zerocheckhigh);
    //if out is true for either of the Or8Ways, then out != 0
    Or(a=zerochecklow, b=zerocheckhigh, out=outnotzero);
    Mux(a=true, b=false, sel=outnotzero, out=zr);
    //ng flag
    Mux(a=false, b=true, sel=mostsigbit, out=ng);



}
